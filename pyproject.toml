[project]
name = "ff-manager"
version = "0.1.0"
description = "Add your description here"
readme = "README.md"
requires-python = ">=3.12"
dependencies = [
    "click>=8.1.7",
    "duckdb>=1.1.0",
    "espn-api>=0.37.1",
    "numpy>=2.1.1",
    "polars>=1.6.0",
    "pyarrow>=17.0.0",
    "pyyaml>=6.0.2",
    "tqdm>=4.66.5",
]

[project.scripts]
ff-manager = "ff_manager.__main__:cli"

[tool.pytest.ini_options]
pythonpath = ["."]
markers = [
    "real: marks tests as real api call (deselect with '-m \"not real\"')",
]

[project.optional-dependencies]
pandas = [
    "pandas>=2.2.3",
]
duckdb = ["duckdb>=1.1.0"]
polars = ["polars>=1.6.0"]
gt = ["gt"]
nfl-data-py = [
    "nfl-data-py>=0.3.2",
]


[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"


[tool.uv]
dev-dependencies = [
    "pre-commit>=4.0.1",
    "pytest>=8.3.2",
    "pytest-cov>=5.0.0",
    "pytest-profiling>=1.7.0",
]

[tool.ruff]
line-length = 88
fix = true

[tool.ruff.lint]
select = [
    "E",      # pycodestyle
    "W",      # pycodestyle
    "F",      # Pyflakes
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "D",      # flake8-docstrings
    "D213",   # Augment NumPy docstring convention: Multi-line docstring summary should start at the second line
    "D417",   # Augment NumPy docstring convention: Missing argument descriptions
    "I",      # isort
    "SIM",    # flake8-simplify
    "TCH",    # flake8-type-checking
    "TID",    # flake8-tidy-imports
    "UP",     # pyupgrade
    "PT",     # flake8-pytest-style
    "RUF",    # Ruff-specific rules
    "PTH",    # flake8-use-pathlib
    "FA",     # flake8-future-annotations
    "PIE",    # flake8-pie
    "TD",     # flake8-todos
    "TRY",    # tryceratops
    "EM",     # flake8-errmsg
    "FBT001", # flake8-boolean-trap
]

ignore = [
    "D102",
    "D103",
    "D101",
    "EM102",
    "EM101",
    # Line length regulated by formatter
    "E501",
    # pydocstyle: http://www.pydocstyle.org/en/stable/error_codes.html
    "D401", # Relax NumPy docstring convention: First line should be in imperative mood
    # flake8-pytest-style:
    "PT011", # pytest.raises({exception}) is too broad, set the match parameter or use a more specific exception
    # flake8-simplify
    "SIM102", # Use a single `if` statement instead of nested `if` statements
    "SIM108", # Use ternary operator
    # ruff
    "RUF005", # unpack-instead-of-concatenating-to-collection-literal
    # pycodestyle
    # Ordered from most common to least common errors.
    "D105", # Missing docstring in magic method
    "D100", # Missing docstring in public module
    "D104", # Missing docstring in public package
    # flake8-todos
    "TD002", # Missing author in TODO
    "TD003", # Missing issue link on the line following this TODO
    # tryceratops
    "TRY003", # Avoid specifying long messages outside the exception class
    # Lints below are turned off because of conflicts with the ruff formatter
    "D206",
    "W191",
]

[tool.ruff.lint.per-file-ignores]
"tests/*.py" = ["D100", "D102", "D103", "B018", "FBT001"]

[tool.ruff.lint.pycodestyle]
max-doc-length = 88

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.flake8-type-checking]
strict = true

[tool.ruff.format]
docstring-code-format = true

[tool.coverage.run]
omit = ["*/__main__.py", "*/__init__.py"]

[tool.coverage.report]
exclude_lines = [
    "if TYPE_CHECKING:",
    # Skip any pass lines such as may be used for @abstractmethod
    "pass",
    # Don't complain about missing debug-only code:
    "def __repr__",
    # Don't complain if non-runnable code isn't run
    "if __name__ == .__main__.:",
]
